******************************index.js****************************
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import "./index.css"


ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);


******************************app.js******************************
import React , {Component}from 'react';
import Navbar from "./components/Navbar";
import PieChart1 from "./components/PieChart1";
import Home from "./components/Home";



class  App extends Component {
  
  render(){
    return (
      <div className="">
        <Navbar/>
        <div className="App">
          <Home/>  
          
        </div>
      </div>
    );
  }  
}

export default App;

******************************home.js******************************
import React , {Component} from "react";
import axios from "axios";
import Tables from "./Tables";
import PieChart1 from "./PieChart1";
import Levels from "./Levels";


class Home extends Component {   
    
    state = {
        handle : "",
        url : "https://codeforces.com/api/user.status?handle=",
        data : [],
        url2 : "https://codeforces.com/api/user.info?handles=",
        data2 : [],
        url3 : "https://codeforces.com/api/user.rating?handle="

    }
    setHandle =(e) =>{
        this.setState({handle : e.target.value})
    }

    sendHandle = async(e) =>{
        let initialurl = this.state.url;
        let initialurl2 = this.state.url2;
        e.preventDefault()
        document.getElementById("loader").style.display="flex"
        const x = this.state.url + this.state.handle;
        this.setState({url : x})
        try{
            const response = await axios.get(this.state.url+this.state.handle);
            if(response !== undefined){
                this.setState({data : response.data.result });
                
            }   
            else
                document.write("there is no such user.");
            this.setState({url : initialurl })
            var unhide = document.getElementById("hidden");
            unhide.style.display = "block";

        }
        catch(error){
            document.getElementById("in").innerHTML="Please Enter Valid Username";
            document.getElementById("hidden").style.display="none";

        }
        try{
            const response2 = await axios.get(this.state.url2+this.state.handle)
            
            //this.setState({url2 : initialurl2 })
            const url2setter = this.state.url2 + this.state.handle;
            this.setState({url2 : url2setter})
            var unhide = document.getElementById("hidden");
            unhide.style.display = "block";
            let xxx=""
            this.setState({handle : xxx})
            this.setState({data2 : response2.data.result[0]});
            this.setState({url2 : initialurl2 })
            
            
        }
        catch(error){
            document.getElementById("in").innerHTML="Please Enter Valid Username";
            document.getElementById("hidden").style.display="none";
        }
        document.getElementById("loader").style.display="none"
        
        
        
    }
    

    render(){ 
        const {data,data2,handle} = this.state;
        const Welcome="Welcome";
        let username=data2.handle;
        if(data2.firstName && data2.lastName)
            username = data2.firstName+" "+data2.lastName;   
        var date = new Date(1324339200000);
        
        //console.log(date.toDateString("MMM dd"));
        return(
            <div className="Home">
                <form onSubmit={this.sendHandle}>
                    <input type="text"  className="validate" data-error="wrong" data-success="right"
                     placeholder="Enter your Codeforces handle"
                     onChange={this.setHandle}/>
                </form>
    
                <div id="loader" style= {{display:"none"}}>
                <div class="preloader-wrapper big active">
                    <div class="spinner-layer spinner-blue">
                        <div class="circle-clipper left">
                        <div class="circle"></div>
                        </div><div class="gap-patch">
                        <div class="circle"></div>
                        </div><div class="circle-clipper right">
                        <div class="circle"></div>
                        </div>
                    </div>

                    <div class="spinner-layer spinner-red">
                        <div class="circle-clipper left">
                        <div class="circle"></div>
                        </div><div class="gap-patch">
                        <div class="circle"></div>
                        </div><div class="circle-clipper right">
                        <div class="circle"></div>
                        </div>
                    </div>

                    <div class="spinner-layer spinner-yellow">
                        <div class="circle-clipper left">
                        <div class="circle"></div>
                        </div><div class="gap-patch">
                        <div class="circle"></div>
                        </div><div class="circle-clipper right">
                        <div class="circle"></div>
                        </div>
                    </div>

                    <div class="spinner-layer spinner-green">
                        <div class="circle-clipper left">
                        <div class="circle"></div>
                        </div><div class="gap-patch">
                        <div class="circle"></div>
                        </div><div class="circle-clipper right">
                        <div class="circle"></div>
                        </div>
                    </div>
                    </div>
                </div>
                <p className="flow-text" style={{color : "red"}} id ="in"></p>
                
                <div id="hidden" style={{display:"none"}}>
                    <p className="flow-text welcomecolor">
                    {Welcome} {data2.rank} {username}</p>
                    
                    <img src = {data2.titlePhoto} className="fixedimage"/>
                    <PieChart1 res={data}/>
                    <br/>
                    <br/>
                    <br/>
                    <Levels res={data}/>
                    <br/>
                    <br/>
                    <br/>
                    <Tables res={data} name={handle} data2={data2}/>
                </div>

                                    
            </div>        
        )
    }
}


export default Home; 
******************************levels.js******************************
import React  from "react";
import {Bar,Chart} from "react-chartjs-2"; 

const Levels = (props) =>{
    
    // let levels =[800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,
    //     2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500]
    //let leveldata = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    let levels=[]
    let leveldata=[]
    for(let i=800;i<=3500;i=i+100){
        levels.push(i);
        leveldata.push(0);
    }  
    
    let a=0,b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;
    for(let i=0;i<props.res.length;i++){
        let x = props.res[i].problem.index
        let y = props.res[i]
        if(y.verdict==="OK"){
            let ind = levels.indexOf(y.problem.rating)
            leveldata[ind]+=1;
        }
        
        if((x==="A" || x==="A1"|| x==="A2") && y.verdict==="OK"){
            a+=1;
        }
        if((x==="B" || x==="B1"|| x==="B2") && y.verdict==="OK"){
            b+=1;
        }
        if((x==="C" || x==="C1"|| x==="C2") && y.verdict==="OK"){
            c+=1;
        }
        if((x==="D" || x==="D1"|| x==="D2") && y.verdict==="OK"){
            d+=1;
        }
        if((x==="E" || x==="E1"|| x==="E2") && y.verdict==="OK"){
            e+=1;
        }
        if((x==="F" || x==="F1"|| x==="F2") && y.verdict==="OK"){
            f+=1;
        }
        if((x==="G" || x==="G1"|| x==="G2") && y.verdict==="OK"){
            g+=1;
        }
        if((x==="H" || x==="H1"|| x==="H2") && y.verdict==="OK"){
            h+=1;
        }
        if((x==="I" || x==="I1"|| x==="I2") && y.verdict==="OK"){
            i+=1;
        }
        if((x==="J" || x==="J1"|| x==="J2") && y.verdict==="OK"){
            j+=1;
        }
    }
    let mydata = [a,b,c,d,e,f,g,h,i,j]
       
    
    return(
        <div>
            <Bar
        data={{
          labels: ["A","B","C","D","E","F","G","H","I"],
          datasets: [
            {
              label: 'Solved Problems',
              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)',
               'rgba(255, 0, 0, 0.5)','rgba(0, 134, 255, 0.5)','rgba(65, 154, 25, 0.5)',
                'rgba(112, 255, 0, 0.5)','rgba(31, 43, 25, 0.5)','rgba(12,100, 5, 0.5)',
                'rgba(123, 123, 123, 0.5)'],
              data: mydata,
            },
          ],
        }}
        options = {{
            scales:{
                yAxes:[{
                    ticks:{
                        beginAtZero:true
                    }
                }]          
        }}}
      />

       <Bar
        data={{
          labels: [800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,
            2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500],
          datasets: [
            {
              label: "Solved Problems",
              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)',
               'rgba(255, 0, 0, 0.5)','rgba(0, 134, 255, 0.5)','rgba(65, 154, 25, 0.5)',
                'rgba(112, 255, 0, 0.5)','rgba(31, 43, 25, 0.5)','rgba(12,100, 5, 0.5)',
                'rgba(123, 123, 123, 0.5)','rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)',
                'rgba(255, 0, 0, 0.5)','rgba(0, 134, 255, 0.5)','rgba(65, 154, 25, 0.5)',
                 'rgba(112, 255, 0, 0.5)','rgba(31, 43, 25, 0.5)','rgba(12,100, 5, 0.5)',
                 'rgba(123, 123, 123, 0.5)','rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)',
                 'rgba(255, 0, 0, 0.5)','rgba(0, 134, 255, 0.5)','rgba(65, 154, 25, 0.5)',
                  'rgba(112, 255, 0, 0.5)','rgba(31, 43, 25, 0.5)','rgba(12,100, 5, 0.5)',
                  'rgba(123, 123, 123, 0.5)','rgba(13, 13, 13, 0.5)'],
              data: leveldata,
            },
          ],
        }}
        options = {{
            scales:{
                yAxes:[{
                    ticks:{
                        beginAtZero:true
                    }
                }]          
        }}}
      />     
            
        </div>
        
    )
}


export default Levels;
********************************navbar********************************
import React from "react"
import {Link,NavLink,BrowserRouter} from "react-router-dom";
const Navbar = (props) =>{    
    return(
        <BrowserRouter>
                <div>
                <nav>
                        <div>
                        <a  className="brand-logo">Visualiser</a>
                        <ul id="nav-mobile" className="right hide-on-med-and-down">
                                <li><NavLink to="/Home">Home</NavLink></li>
                                <li><NavLink to="/VRC">Virtual Rating Change</NavLink></li>
                        </ul>
                        </div>
                </nav>
                </div>
        </BrowserRouter>
    )
}

export default Navbar

********************************pie chart********************************


import React,{Component} from "react";
import {Pie} from 'react-chartjs-2';


var d=[];
var dd=[];

let state = {
    labels: ['Wrong Answer', 'Compilation Error', 'Accepted',
             'Time Limit Exceeded', 'Runtime Error','Memory Limit Exceeded'],
    datasets: [
      {
        label: '',
        backgroundColor: [],
        hoverBackgroundColor: [],
        data: [0,0,0,0,0,0]
      }
    ]
  }
  let state2 = {
    labels: ["GNU C11","Clang++17 Diagnostics","GNU C++11","GNU C++14","GNU C++17",
    "MS C++","MS C++ 2017","GNU C++17 (64)","Mono C#","D","Go","Haskell","Java 11",
    "Java 8","Kotlin","Ocaml","Delphi","FPC","PascalABC.NET","Perl","PHP","Python 2",
    "Python 3","PyPy 2","PyPy 3","Ruby","Rust","Scala","JavaScript","Node.js"],
    datasets: [
      {
        label: '',
        backgroundColor: [],
        hoverBackgroundColor: [],
        data: [0,0,0,0]
      }
    ]
  }  

export default class PieChart1 extends Component{
    
    
    
    set =() =>{
        let datasets = [{
            label: 'Submissions',
            backgroundColor: [
              '#B21F00','#C9DE00','#2FDE00',
              '#00A6B4','#6800B4','#45BCD3'
            ],
            hoverBackgroundColor: [
            '#501800','#4B5000','#175000',
            '#003350','#35014F','#131CD3'            
            ],
            data: [0,0,0,0,0,0]
          }
        ]
        let datasets2 = [{
            label: 'Languages',
            backgroundColor: [
              '#B21F00','#C9AA00','#2FDE00','#C0A6B4',
              '#BC1F00','#C9AE00','#2FCAB0','#00AAB4',
              '#B21A00','#C1DE00','#AFDE00','#CBA6B4',
              '#BCVF00','#CDDC00','#2FDEA0','#00ABEB',
              '#B34F0D','#C12E00','#3CAE00','#BCAAB4',
              '#B56FDA','#C9DE00','#2FAAA0','#00BCB4',
              '#B2EFF0','#BBDE00','#2FDBB0','#AAA6B4',
              '#DC1FC0','#CCDECC',
            ],
              
            hoverBackgroundColor: [
            '#501800','#4B5000','#175000','#003350',
            '#501800','#4B5000','#175000','#003350',
            '#501800','#4B5000','#175000','#003350',
            '#501800','#4B5000','#175000','#003350',
            '#501800','#4B5000','#175000','#003350',
            '#501800','#4B5000'
            ],
            data: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
          }
        ]
        
        let verdicts=["WRONG_ANSWER" ,"COMPILATION_ERROR","OK", "TIME_LIMIT_EXCEEDED",
                        'RUNTIME_ERROR','MEMORY_LIMIT_EXCEEDED']
        let lang = ["GNU C11","Clang++17 Diagnostics","GNU C++11","GNU C++14","GNU C++17",
            "MS C++","MS C++ 2017","GNU C++17 (64)","Mono C#","D","Go","Haskell","Java 11",
            "Java 8","Kotlin","Ocaml","Delphi","FPC","PascalABC.NET","Perl","PHP","Python 2",
            "Python 3","PyPy 2","PyPy 3","Ruby","Rust","Scala","JavaScript","Node.js"]
        
        for(let i=0;i<this.props.res.length;i++){ 
            let ind = verdicts.indexOf(this.props.res[i].verdict);
            datasets[0].data[ind]+=1;
            let ind2 = lang.indexOf(this.props.res[i].programmingLanguage)
            datasets2[0].data[ind2]+=1;           
        }
        
        
        d = datasets[0].data
        dd = datasets2[0].data
        state.datasets[0].data = d
        state2.datasets[0].data=dd
        state.datasets[0].backgroundColor = datasets[0].backgroundColor;
        state.datasets[0].hoverBackgroundColor = datasets[0].hoverBackgroundColor;
        state2.datasets[0].backgroundColor = datasets2[0].backgroundColor;
        state2.datasets[0].hoverBackgroundColor = datasets2[0].hoverBackgroundColor;
    }

    render(){
        return(
            <div className="pies row">
                <div className="pies col s1 m9">
                    {this.set()}
                    <div className="pie">
                      <div>
                        <div className="card">
                          <div className="card-content z-depth-4 cc">
                            <span className="card-title">Your Submissions</span>    
                              <p>
                                <Pie
                                    data={state}
                                    options={{
                                        tooltips:{
                                            bodyFontSize : 20
                                        },
                                        title:{
                                        display:false,
                                        text:'',
                                        fontSize:20
                                        },
                                        legend:{
                                        display:true,
                                        position:'right'
                                        }
                                    }}
                                />
                            </p>
                            </div>
                            
                        </div>
                        </div>
                    </div>
                    <hr/>
                     
                    <div className="pie">
                        <div className="col s12 m9">
                        <div className="card">
                            <div className="card-content z-depth-4 cc">
                            <span className="card-title">Your Languages</span>      
                                <Pie
                                    data={state2}
                                    options={{
                                        tooltips:{
                                            bodyFontSize : 20
                                        },
                                        title:{
                                        display:false,
                                        text:'',
                                        fontSize:20
                                        },
                                        legend:{
                                        display:false,
                                        position:'right'
                                        }
                                    }}
                                />
                            
                            </div>
                            
                        </div>
                        </div>
                    </div>
                           
                    
                </div>
                
            </div>
        )

    }
    
}

********************************Tables********************************
import React from "react"


const Tables = (props) =>{  
  let data = props.res 
  const {data2} = props;
  let contests = []
  let attempts = []
  let solved = []    
  let totalattempts = []
  let maxattempts = []
  let maxattemptsval = 0
  let acinoneattempt = []
  let acin_onecount=0;
  let now = new Date().getTime();
  let lastonline = data2.lastOnlineTimeSeconds*1000;
  let dateregistered = new Date(data2.registrationTimeSeconds*1000).toDateString();
  for(let i=0;i<props.res.length;i++){
      totalattempts.push(data[i].contestId+data[i].problem.index)
      if(contests.indexOf(data[i].contestId)===-1 && data[i].author.participantType==="CONTESTANT"){
          contests.push(data[i].contestId)
      }

      if(attempts.indexOf(data[i].contestId+data[i].problem.index)===-1){
          if(data[i].verdict==="OK")
              solved.push(data[i].contestId+data[i].problem.index)
          attempts.push(data[i].contestId+data[i].problem.index)
      }    
  }

  
  for(let i=0;i<attempts.length;i++)
      maxattempts.push(0);
  for(let i=0;i<totalattempts.length;i++){
      let ind = attempts.indexOf(totalattempts[i])
      maxattempts[ind]+=1;
  }
  
  for(let i=0;i<maxattempts.length;i++){
      if (maxattempts[i] > maxattemptsval){
          maxattemptsval = maxattempts[i];
      }
  }

  for(let i=0;i<solved.length;i++)
      acinoneattempt.push(0);
  for(let i=0;i<data.length;i++){
      let ind = solved.indexOf(data[i].contestId+data[i].problem.index)
      if(ind>-1 && data[i].verdict!=="OK"){
          acinoneattempt[ind]+=1;
      }
  }
  
  for(let i=0;i<acinoneattempt.length;i++){
      if(acinoneattempt[i]===0)
          acin_onecount+=1;
  }

  



  return(
      <div className="">
          <table className="">
      <thead>
        <tr>
          <th className="tabletitle">Few Interesting Facts About you</th>
            <th></th>
            
        </tr>
      </thead>

      <tbody>
      <tr>
          <td><b>Registered </b></td>
          <td>{dateregistered}</td>
          
        </tr>
        <tr>
          <td><b>Last online</b></td>
          <td>{contests.length}</td>
          
        </tr>
        <tr>
          <td><b>Number of Contests partcipated </b></td>
          <td>{contests.length}</td>
          
        </tr>
        <tr>
          <td><b>Total Unique Problems Tried</b></td>
          <td>{attempts.length}</td>
          
        </tr>
        <tr>
          <td><b>Total Unique problems solved</b></td>
          <td>{solved.length} ({Math.round((100)*(solved.length)/(attempts.length))}%)</td>
        </tr>
        <tr>
          <td><b>Average Attemps per problem</b></td>
          <td>{(data.length/solved.length).toFixed(2)}</td>
        </tr>
        <tr>
          <td><b>Maximum Attemps for a problem</b></td>
          <td>{maxattemptsval}</td>
        </tr>
        <tr>
          <td><b>AC in one attempt</b></td>
          <td>{acin_onecount}({Math.round((100*acin_onecount)/(solved.length))}%)</td>
        </tr>

      </tbody>
    </table>            
      </div>
  )
}


export default  Tables
*************************************index.css************************************
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
    sans-serif;
  
}
.App{
  
  margin: 20px auto;
  width: 90%;
  max-width: 700px;
  justify-content: space-evenly;
  
}

.pies{
  display: flex;
  justify-content:center;
  padding:5px;
  
}
.cc{
  height: 50vh;
  width : 500px;
  overflow-y: hidden;
  overflow-x: auto;

}

.pie{
margin:15px;
}

a:hover{
  color:white;
}
.mytable{
  margin:0 30px;
  padding:5px;
  width:100%;
}

.tabletitle{
  color:blue;
  font-size: 24px;
}
#loader {
  width: 100%;
  height: 100vh;
  background-color: rgba(0,0,0,0.15);
  /* margin: 0; */
  position: fixed;
  z-index: 999;
  display: flex;
  justify-content: center;
  align-items: center;
  top: 0;
  left: 0;
}
.cardssize{
  height : 100vh;
  
}

.fixedimage{
  width:32%;
  display:block;
  margin: auto;
  max-width : 100%;
  min-width : 300px;
  margin-bottom: 16px;
  border-radius: 4px;
  justify-content: center;
}

.welcomecolor{
  color: black;
  font-weight: bolder;
}
***************************************choice******************************
import React , {Component} from "react";
import Home from "./Home";
import HomeAtcoder from "./HomeAtcoder";
import HomeCodechef from "./HomeCodechef";
import $ from 'jquery';
import { Route, BrowserRouter,Link,NavLink } from 'react-router-dom'


class  Choices extends Component{
    



    render(){
        return(
            <div>
                <div className="parallax"></div>
                <div className="container choice">
       
                    <div class="col s12">
                    <ul class="tabs">
                        <li class="tab col s3"><a href="#test1">what is cpv</a></li>
                        <li class="tab col s3"><a class="active" href="#test2">how to use it?</a></li>
                        <li class="tab col s3 "><a href="#test3">who is this for?</a></li>
                        <li class="tab col s3"><a href="#test4">support us!</a></li>
                    </ul>
                    </div>
                    <div id="test1" class="col s12">
                        <div className="card">
                            <div className="card-content choicecard">
                                <span className="card-title choicetitle"><b>What is CP Visualiser?</b></span>
                                <p className="choicecontent">The Best Destination to check your competitve programming statistics.</p>
                                <p className="choicecontent yellow-text text-darken-4">NOTE: This website currently only supports 3 websites!</p>
                            </div>
                            
                        </div>

                    </div>
                    <div id="test2" class="col s12">
                    <div className="card">
                        <div className="card-content choicecard">
                            <span className="card-title choicetitle"><b>How to use it?</b></span>
                            <p className="choicecontent">Just go to any tab in navbar and enter your respective website username. </p>
                            <p className="choicecontent">That's it. you can see your stats from that website.</p>
                            <p className="choicecontent"> OR Just Select any website given below here to get started.</p>
                        </div>
                        <div className="card-action">
                            <NavLink to="/Home" className="blue-text text-darken-2">Codeforces</NavLink>
                            <NavLink to="/atcoder" className="blue-text text-darken-2">AtCoder</NavLink>
                            <NavLink to="/codechef" className="blue-text text-darken-2">CodeChef</NavLink>
                            </div>
                    </div>
                    </div>
                    <div id="test3" class="col s12">
                    <div className="card">
                        <div className="card-content choicecard">
                            <span className="card-title choicetitle"><b>Who is this for?</b></span>
                            <p className="choicecontent">if you have any account in any of the 3 programming websites, you can check your stats. </p>
                            <p className="choicecontent">or you can view other's account's stats too!!</p>
                        </div>
                    </div>
                    </div>
                    <div id="test4" class="col s12">
                    <div className="card">
                        <div className="card-content choicecard">
                            <span className="card-title choicetitle"><b>Support us!!</b></span>
                            <p className="choicecontent">You can go to our github repository and sponsor us or you can star the repo.</p>
                        </div>
                        <div className="card-action">
                            <a href="https://github.com/srikar7777" className="blue-text text-darken-2">Github Repo</a>
                            
                        </div>
                    </div>
                    </div>
                </div>
                </div>
                </div>
                <div className="parallax2"></div>
                
                    
                
            </div>
        )
        
        
          

    }
    


}




export default Choices;
///////////////
<form>
                            <input type="email" placeholder="Enter your email"/>
                            <input type="submit" value="Submit"/>
                        </form>

















